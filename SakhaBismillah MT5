//+------------------------------------------------------------------+
//|                                               SakhaBismillah.mq5 |
//|                                Copyright 2025, bunganar           |
//|                     https://github.com/bunganar/KING-CRAZY         |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <Trade\SymbolInfo.mqh>
#include <MovingAverages.mqh>
#include <Indicators\Indicators.mqh>

// Global objects
CTrade    trade;
CSymbolInfo symbolInfo;

// INPUT (sebelumnya "extern" di MQL4, input tidak dapat diubah)
// Catatan: Input tidak dapat diubah, sehingga kami menggunakan variabel lokal untuk 
// menetapkan nilai default jika input bernilai 0.
input bool        UseBreakConfirmation  = false;
input string      IndicatorDescription  = "1=MA,2=BB,3=Envelopes";
input int         SelectedIndicator     = 3;
input int         MagicNumber           = 1245986;
input string      ExpertName            = "fxindo.com";
input double      CandleLimit           = 10.0;
input double      StopDistance          = 3.0;  // PendingDistance (JarakStop)
input double      TakeProfitPoints      = 2.0;
input double      StopLossPoints        = 6.0;
input bool        UseStrictStopLoss     = true;
input int         IndicatorPeriod       = 0;   // Jika 0, akan diganti dengan default (3) di runtime
input int         IndicatorShift        = 0;
input int         CandleShift           = 0;
input double      FixedLotSize          = 0.0;
input double      RiskPercentage        = 10.0;
input bool        DeleteOnSpreadWiden   = false;
input double      MaxSpread             = 1.0;
input double      ClosePercentage       = 0.0;
input double      InitialCapital        = 0.0;
input bool        IsTrailingStopEnabled = true;
input bool        IsFridayOff           = false;
input bool        IsMondayOff           = false;

// Global variables (sedikit penamaan ulang untuk menghindari konflik dengan symbol dari library)
string g_ROBOT_NAME = "Robot";
string g_CONFIG_NAME = "Konfigurasi";
bool   g_isDebugMode = false;
bool   g_isDisplayTrades = false;
bool   g_isTrailingStopEnabled = true;
bool   g_isStopOrderEnabled = false;
double g_defaultCandleRange = 18.0;
double g_requiredMargin;
double g_lotStep;
string g_MMSettings = "MM";
double g_defaultLotSize = 0.1;
bool   g_isMoneyManagementEnabled = true;
double g_minLotSize = 0.01;
double g_maxLotSize = 100.0;
string g_SpreadSettings = "Spread Maksimal";
double g_defaultSpreadLimit = 10.0;
string g_ScalpingSettings = "Faktor Scalping";
double g_currentSpread;
double g_spreadMultiplier = 0.4;
double g_defaultPipValue = 0.3333333333;
double g_pipValue = 0.0;
string g_TrailingSettings = "SL / TP / Trailing";
double g_trailingGap = 0.0;
double g_trailingLimit = 0.0;
double g_TrailingStopPoints = 2.0;
string g_DayFilterSettings = "Filter Hari";
bool   g_isMondayExcluded = false;
int    g_excludedDay = 0;
int    g_currentPosition = 0;
bool   g_useStopOrders = true;
string g_dummyString;
int    g_digits = 0;         // Menghindari konflik dengan deklarasi library terkait
double g_point = 0.0;
int    g_slippage = 0;       // Menghindari konflik nama variabel
double g_unusedArray1[30];
double g_unusedArray2[30];
int    g_unusedArray3[30];
double g_unusedValue1 = 1.0;
bool   g_isTickProcessingEnabled = true;
double g_defaultTrailingDistance = 2.0;
double g_defaultGapValue = 0.0;
int    g_priceCheckCounter = 0;
datetime g_lastTickTime = 0;
int    g_tickCounter = 0;
double g_spreadHistory[30];
int    g_spreadHistoryCount = 0;
bool   g_isSpreadCheckEnabled = true;
double g_minTrailingStep = 0.5;
double g_trailingStopDistance = 1.0;
double g_maxTrailingDistance = 4.0;
bool   g_useTrailingStop = true;
string g_unusedString1;
string g_debugMessage;

//+------------------------------------------------------------------+
//| Helper functions for type safety (tidak merubah logika)            |
//+------------------------------------------------------------------+
bool SelectOrder(ulong ticket)
{
   // Placeholder: Di MQL5 pemrosesan order harus melalui posisi dan order pool
   return true;
}

bool DeleteOrder(ulong ticket)
{
   // Hapus pending order melalui kelas trade
   return trade.OrderDelete(ticket);
}

string FormatDouble(double value, int ndigits)
{
   return DoubleToString(value, ndigits);
}

string FormatInteger(int value)
{
   return IntegerToString(value);
}

//+------------------------------------------------------------------+
//| Helper indicator functions                                       |
//+------------------------------------------------------------------+
double GetMA(string symbol, ENUM_TIMEFRAMES timeframe, int period, int shift, int ma_method, int applied_price)
{
   double buffer[];
   int handle = iMA(symbol, timeframe, period, 0, (ENUM_MA_METHOD)ma_method, applied_price);
   if(handle != INVALID_HANDLE)
   {
      if(CopyBuffer(handle, 0, shift, 1, buffer) > 0)
      {
         IndicatorRelease(handle);
         return buffer[0];
      }
      IndicatorRelease(handle);
   }
   return 0.0;
}

double GetBandsUpper(string symbol, ENUM_TIMEFRAMES timeframe, int period, double deviation, int applied_price, int shift)
{
   double buffer[];
   // Dalam MQL5 iBands menggunakan parameter: symbol, timeframe, period, shift, deviation, applied_price
   int handle = iBands(symbol, timeframe, period, 0, deviation, applied_price);
   if(handle != INVALID_HANDLE)
   {
      // Buffer index 0 adalah pita atas
      if(CopyBuffer(handle, 0, shift, 1, buffer) > 0)
      {
         IndicatorRelease(handle);
         return buffer[0];
      }
      IndicatorRelease(handle);
   }
   return 0.0;
}

double GetBandsLower(string symbol, ENUM_TIMEFRAMES timeframe, int period, double deviation, int applied_price, int shift)
{
   double buffer[];
   int handle = iBands(symbol, timeframe, period, 0, deviation, applied_price);
   if(handle != INVALID_HANDLE)
   {
      // Buffer index 2 adalah pita bawah pada iBands MQL5
      if(CopyBuffer(handle, 2, shift, 1, buffer) > 0)
      {
         IndicatorRelease(handle);
         return buffer[0];
      }
      IndicatorRelease(handle);
   }
   return 0.0;
}

double GetEnvelopesUpper(string symbol, ENUM_TIMEFRAMES timeframe, int period, int ma_method, int applied_price, double deviation, int shift)
{
   double buffer[];
   // Di MQL5 iEnvelopes: parameters: symbol, timeframe, period, ma_method, applied_price, deviation
   int handle = iEnvelopes(symbol, timeframe, period, ma_method, applied_price, deviation);
   if(handle != INVALID_HANDLE)
   {
      // Buffer index 0 dianggap sebagai pita atas
      if(CopyBuffer(handle, 0, shift, 1, buffer) > 0)
      {
         IndicatorRelease(handle);
         return buffer[0];
      }
      IndicatorRelease(handle);
   }
   return 0.0;
}

double GetEnvelopesLower(string symbol, ENUM_TIMEFRAMES timeframe, int period, int ma_method, int applied_price, double deviation, int shift)
{
   double buffer[];
   int handle = iEnvelopes(symbol, timeframe, period, ma_method, applied_price, deviation);
   if(handle != INVALID_HANDLE)
   {
      // Buffer index 1 dianggap sebagai pita bawah
      if(CopyBuffer(handle, 1, shift, 1, buffer) > 0)
      {
         IndicatorRelease(handle);
         return buffer[0];
      }
      IndicatorRelease(handle);
   }
   return 0.0;
}

//+------------------------------------------------------------------+
//| Trade order wrapper functions for pending orders                 |
//+------------------------------------------------------------------+
bool SendBuyStop(double volume, double price, int slippage, double stopLoss, double takeProfit, string comment, datetime expiration)
{
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);
   
   request.action         = TRADE_ACTION_PENDING;
   request.symbol         = Symbol();
   request.volume         = volume;
   request.price          = price;
   request.sl             = stopLoss;
   request.tp             = takeProfit;
   request.deviation      = slippage;
   request.magic          = MagicNumber;
   request.type           = ORDER_TYPE_BUY_STOP;
   request.type_filling   = ORDER_FILLING_FOK;
   request.type_time      = ORDER_TIME_GTC;
   request.expiration     = expiration;
   request.comment        = comment;
   
   if(OrderSend(request, result))
      return true;
   else
   {
      Print("BuyStop Error: ", result.comment);
      return false;
   }
}

bool SendSellStop(double volume, double price, int slippage, double stopLoss, double takeProfit, string comment, datetime expiration)
{
   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);
   ZeroMemory(result);
   
   request.action         = TRADE_ACTION_PENDING;
   request.symbol         = Symbol();
   request.volume         = volume;
   request.price          = price;
   request.sl             = stopLoss;
   request.tp             = takeProfit;
   request.deviation      = slippage;
   request.magic          = MagicNumber;
   request.type           = ORDER_TYPE_SELL_STOP;
   request.type_filling   = ORDER_FILLING_FOK;
   request.type_time      = ORDER_TIME_GTC;
   request.expiration     = expiration;
   request.comment        = comment;
   
   if(OrderSend(request, result))
      return true;
   else
   {
      Print("SellStop Error: ", result.comment);
      return false;
   }
}

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Inisialisasi variabel sesuai dokumentasi MQL5
   symbolInfo.Name(Symbol());
   g_digits = (int)symbolInfo.Digits();
   g_point  = symbolInfo.Point();
   g_pipValue = g_point;
   if(g_digits==3 || g_digits==5)
      g_pipValue = 10.0 * g_point;
   
   // Default nilai spread
   g_currentSpread = MaxSpread;
   
   // Gunakan nilai lokal untuk IndicatorPeriod
   int localIndicatorPeriod = IndicatorPeriod;
   if(localIndicatorPeriod == 0)
      localIndicatorPeriod = 3;
   
   // Inisialisasi day filter
   if(IsFridayOff)
      g_excludedDay = 5;
   if(IsMondayOff)
      g_isMondayExcluded = true;
      
   ArrayInitialize(g_spreadHistory, 0);
   
   // Set waktu tick awal
   g_lastTickTime = TimeCurrent();
   g_tickCounter = 0;
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Comment("");
}

//+------------------------------------------------------------------+
//| Display spread information (menggunakan fungsi Comment)          |
//+------------------------------------------------------------------+
void DisplaySpreadInfo(double spreadPoints)
{
   string infoMessage = StringFormat("Mbelgedes Robot FX \n%s\n------------------------------------------------\nINFORMASI AKUN:\nSpread: %s pip(s)\nJumlah Lot: %s lot(s)\nBalance Akun: %s\nMinimum Stop: %s pip(s)\n------------------------------------------------\n",
      g_debugMessage,
      FormatDouble(spreadPoints,1),
      FormatDouble(g_defaultLotSize,2),
      FormatDouble(AccountInfoDouble(ACCOUNT_BALANCE),2),
      FormatDouble(14,2));
      
   Comment(infoMessage);
}

//+------------------------------------------------------------------+
//| Format logging message with line breaks                          |
//+------------------------------------------------------------------+
string FormatTickNumber(int tickNum)
{
   if(tickNum < 10)
      return StringFormat("00%d", tickNum);
   if(tickNum < 100)
      return StringFormat("0%d", tickNum);
   return FormatInteger(tickNum);
}

//+------------------------------------------------------------------+
//| Calculate logarithm with custom base                             |
//+------------------------------------------------------------------+
double CalculateLogBase(double base, double value)
{
   return MathLog(value) / MathLog(base);
}

//+------------------------------------------------------------------+
//| Print message with line breaks                                   |
//+------------------------------------------------------------------+
void PrintFormattedMessage(string message)
{
   int startPos = 0, endPos = -1;
   int msgLength = StringLen(message);
   while(endPos < msgLength)
   {
      startPos = endPos + 1;
      endPos = StringFind(message, "\n", startPos);
      if(endPos == -1)
      {
         Print(StringSubstr(message, startPos));
         return;
      }
      Print(StringSubstr(message, startPos, endPos - startPos));
   }
}

//+------------------------------------------------------------------+
//| Normalize price value                                              |
//+------------------------------------------------------------------+
double NormalizePrice(double price)
{
   return NormalizeDouble(price, g_digits);
}

//+------------------------------------------------------------------+
//| Main trading function (dipanggil dari OnTick)                     |
//+------------------------------------------------------------------+
void ProcessTrading(ENUM_TIMEFRAMES timeframe)
{
   int errorCheck = 0;
   double buyPrice = 0.0;
   double sellPrice = 0.0;
   bool orderSuccess;
   double pipsValue = 0.0;
   double stopLevel;
   double spreadValue = 0.0;
   double orderLots = 0.0;
   double highPrice = 0.0, lowPrice = 0.0;
   datetime expirationTime;
   int lotPrecision = 0;
   double calculatedSpread = 0.0;
   double stopLossLevel = 0.0;
   double takeProfitLevel = 0.0;
   double trailingAmount = 0.0;
   int activeOrderCount = 0;
   double deviationRange = 0.0;
   string positionInfo = "";
   bool shouldRepeatOrder = false;
   
   // Update tick time tracking
   if(g_lastTickTime < TimeCurrent())
   {
      g_lastTickTime = TimeCurrent();
      g_tickCounter = 0;
   }
   else
      g_tickCounter++;
      
   // Dapatkan data harga
   highPrice = iHigh(Symbol(), timeframe, CandleShift);
   lowPrice  = iLow(Symbol(), timeframe, CandleShift);
   
   double upperBand = 0.0, lowerBand = 0.0;
   // Hitung nilai indikator berdasarkan pilihan; gunakan localIndicatorPeriod dari OnInit jika diperlukan
   if(SelectedIndicator == 1)
   {
      upperBand = GetMA(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, IndicatorShift, MODE_LWMA, PRICE_HIGH);
      lowerBand = GetMA(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, IndicatorShift, MODE_LWMA, PRICE_LOW);
   }
   else if(SelectedIndicator == 2)
   {
      upperBand = GetBandsUpper(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, 1.5, PRICE_OPEN, IndicatorShift);
      lowerBand = GetBandsLower(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, 1.5, PRICE_OPEN, IndicatorShift);
   }
   else if(SelectedIndicator == 3)
   {
      // Menggunakan 0.07 sebagai deviation untuk envelopes
      upperBand = GetEnvelopesUpper(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, MODE_LWMA, PRICE_OPEN, 0.07, IndicatorShift);
      lowerBand = GetEnvelopesLower(Symbol(), timeframe, IndicatorPeriod==0?3:IndicatorPeriod, MODE_LWMA, PRICE_OPEN, 0.07, IndicatorShift);
   }
   
   deviationRange = upperBand - lowerBand;
   bool isPriceAboveMiddle = (SymbolInfoDouble(Symbol(), SYMBOL_BID) >= lowerBand + deviationRange/2.0);
   
   // Cek pembatasan hari trading (gunakan DayOfWeek() MQL5)
   int dayOfWeek = DayOfWeek();
   if(dayOfWeek != (g_isMondayExcluded ? 1 : -1) && dayOfWeek != g_excludedDay)
   {
      MqlDateTime dt;
      TimeToStruct(TimeCurrent(), dt);
      if(dt.hour == 0 && dt.min == 0)
         ;// InitialCapital bersifat input sehingga tidak dimodifikasi
      
      if(g_digits == 0)
         return;
      
      // Update informasi spread
      spreadValue = SymbolInfoDouble(Symbol(), SYMBOL_ASK) - SymbolInfoDouble(Symbol(), SYMBOL_BID);
      
      // Simpan spread history
      ArrayCopy(g_spreadHistory, g_spreadHistory, 0, 1, 29);
      g_spreadHistory[29] = spreadValue;
      if(g_spreadHistoryCount < 30)
         g_spreadHistoryCount++;
      
      double averageSpread = 0.0;
      int pos = 29;
      for(int i=0; i<g_spreadHistoryCount; i++)
      {
         averageSpread += g_spreadHistory[pos];
         pos--;
      }
      double spreadAverage = averageSpread / g_spreadHistoryCount;
      
      // Penyesuaian komisi (g_defaultGapValue)
      if(spreadAverage < 1.5 * g_pipValue)
         g_defaultGapValue = 1.5 * g_pipValue - spreadAverage;
      
      // Hitung harga dengan komisi
      double askWithCommission = NormalizePrice(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + g_defaultGapValue);
      double bidWithCommission = NormalizePrice(SymbolInfoDouble(Symbol(), SYMBOL_BID) - g_defaultGapValue);
      double totalSpread = spreadAverage + g_defaultGapValue;
      double candleRange = highPrice - lowPrice;
      
      // Generate order identifier (tidak digunakan langsung di MQL5)
      string orderIdentifier = StringFormat("%s-%s-0", FormatInteger((int)g_isTrailingStopEnabled), FormatInteger((int)g_isStopOrderEnabled));
      
      double defaultRange = g_defaultCandleRange * g_pipValue;
      double candleLimitCalculated = CandleLimit * g_pipValue;
      
      int signalDirection = 0;
      if(UseBreakConfirmation)
      {
         if(candleRange > candleLimitCalculated)
         {
            if(SymbolInfoDouble(Symbol(), SYMBOL_BID) < lowerBand)
               signalDirection = -1;
            else if(SymbolInfoDouble(Symbol(), SYMBOL_BID) > upperBand)
               signalDirection = 1;
         }
      }
      else
      {
         if(candleRange > candleLimitCalculated)
         {
            if(SymbolInfoDouble(Symbol(), SYMBOL_BID) < upperBand)
               signalDirection = -1;
            else if(SymbolInfoDouble(Symbol(), SYMBOL_BID) > lowerBand)
               signalDirection = 1;
         }
      }
      
      // Hitung stop range
      double stopRange = (g_pipValue == 0.0 ? g_defaultPipValue * defaultRange : g_pipValue * g_pipValue);
      // Menggunakan SYMBOL_TRADE_STOPS_LEVEL sebagai pengganti MODE_STOPLEVEL
      stopLevel = (double)SymbolInfoInteger(Symbol(), SYMBOL_TRADE_STOPS_LEVEL) * g_point;
      stopRange = MathMax(stopLevel, stopRange);
      if(SymbolInfoDouble(Symbol(), SYMBOL_BID) == 0.0 || symbolInfo.VolumeStep() == 0.0)
         stopRange = 0;
      
      double totalRequiredRange = stopRange + spreadAverage + g_defaultGapValue;
      
      if(g_isSpreadCheckEnabled)
         expirationTime = TimeCurrent() + 60 * MathMax(10 * (int)timeframe, 60);
      else
         expirationTime = 0;
      
      if(symbolInfo.VolumeStep() == 0.0)
         lotPrecision = 5;
      else
         lotPrecision = (int)(MathLog(symbolInfo.VolumeStep()) / MathLog(0.1));
      
      // Money Management (tidak mengubah logika)
      if(g_isMoneyManagementEnabled)
      {
         if(RiskPercentage < 0.01 || RiskPercentage > 100.0)
         {
            Comment("GALAT -- Cek Nilai Risk.");
            return;
         }
         if(AccountInfoDouble(ACCOUNT_BALANCE) <= 0.0)
         {
            Comment("GALAT -- Balance Akun adalah " + FormatDouble(MathRound(AccountInfoDouble(ACCOUNT_BALANCE)), 0));
            return;
         }
         if(stopRange != 0.0)
         {
            if(FixedLotSize == 0.0)
            {
               g_lotStep = symbolInfo.VolumeStep();
               g_requiredMargin = AccountInfoDouble(ACCOUNT_MARGIN);
               g_defaultSpreadLimit = MathMax(AccountInfoDouble(ACCOUNT_BALANCE), g_defaultSpreadLimit);
               
               double maxLotCalculated = MathMin(AccountInfoDouble(ACCOUNT_FREEMARGIN) * AccountInfoInteger(ACCOUNT_LEVERAGE) / 2.0,
                  g_defaultSpreadLimit * RiskPercentage / 100.0 * SymbolInfoDouble(Symbol(), SYMBOL_BID) / totalRequiredRange);
               
               g_defaultLotSize = maxLotCalculated / symbolInfo.VolumeStep();
               g_defaultLotSize = NormalizeDouble(g_defaultLotSize, lotPrecision);
               
               if(g_defaultLotSize * g_requiredMargin > AccountInfoDouble(ACCOUNT_FREEMARGIN))
                  g_defaultLotSize -= g_lotStep;
               
               g_defaultLotSize = MathMax(g_minLotSize, g_defaultLotSize);
               g_defaultLotSize = MathMax(symbolInfo.VolumeMin(), g_defaultLotSize);
               g_defaultLotSize = MathMin(g_maxLotSize, g_defaultLotSize);
               g_defaultLotSize = MathMin(symbolInfo.VolumeMax(), g_defaultLotSize);
            }
            else
               g_defaultLotSize = FixedLotSize;
         }
      }
      
      activeOrderCount = 0;
      
      // Proses order yang sudah ada (placeholder, karena pemrosesan order di MQL5 memerlukan pendekatan berbeda)
      // ...
      
      // Cek harga normalisasi
      if(g_priceCheckCounter >= 0 || g_priceCheckCounter == -2)
      {
         int bidTicks = (int)NormalizeDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID)/g_point, 0);
         int askTicks = (int)NormalizeDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK)/g_point, 0);
         if(bidTicks % 10 != 0 || askTicks % 10 != 0)
            g_priceCheckCounter = -1;
         else
         {
            if(g_priceCheckCounter >= 0 && g_priceCheckCounter < 10)
               g_priceCheckCounter++;
            else
               g_priceCheckCounter = -2;
         }
      }
      
      // Proses order baru jika kondisi terpenuhi
      if(stopRange != 0.0 && activeOrderCount == 0 && signalDirection != 0 &&
         NormalizeDouble(totalSpread, g_digits) <= NormalizeDouble(g_currentSpread * g_pipValue, g_digits) &&
         g_priceCheckCounter == -1)
      {
         if(signalDirection < 0)
         {
            if(g_useTrailingStop)
            {
               buyPrice = SymbolInfoDouble(Symbol(), SYMBOL_ASK) + StopDistance * g_pipValue;
               if(!SendBuyStop(g_defaultLotSize, buyPrice, g_slippage, buyPrice - StopLossPoints * g_pipValue,
                  buyPrice + TakeProfitPoints * g_pipValue, ExpertName, expirationTime))
               {
                  shouldRepeatOrder = true;
                  Print("GALAT BUYSTOP : " + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits) +
                        " SL:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits) +
                        " TP:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits));
               }
               else
                  Print("BUYSTOP : " + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits) +
                        " SL:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits) +
                        " TP:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits));
            }
         }
         else if(signalDirection > 0)
         {
            if(g_useTrailingStop)
            {
               sellPrice = SymbolInfoDouble(Symbol(), SYMBOL_BID) - StopDistance * g_pipValue;
               if(!SendSellStop(g_defaultLotSize, sellPrice, g_slippage, sellPrice + StopLossPoints * g_pipValue,
                  sellPrice - TakeProfitPoints * g_pipValue, ExpertName, expirationTime))
               {
                  shouldRepeatOrder = true;
                  Print("GALAT SELLSTOP : " + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits) +
                        " SL:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits) +
                        " TP:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits));
               }
               else
                  Print("SELLSTOP : " + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits) +
                        " SL:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_ASK) + stopRange, g_digits) +
                        " TP:" + FormatDouble(SymbolInfoDouble(Symbol(), SYMBOL_BID) - stopRange, g_digits));
            }
         }